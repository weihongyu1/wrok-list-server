spring:
  datasource:
      # 数据源类型
      type: com.alibaba.druid.pool.DruidDataSource
      # 连接数据库的url，不同数据库不一样。例如：
      # mysql : jdbc:mysql://ip:port/database
      # oracle : jdbc:oracle:thin:@ip:port:database
      url: jdbc:mysql://localhost:3306/jj_list?characterEncoding=UTF-8
      # 数据库的用户名
      username: root
      # 数据库的密码
      password: root
      # 驱动（根据url自动识别）这一项可配可不配，如果不配置druid会根据url自动识别dbType，然
      # 后选择相应的driverClassName(建议配置下)
      driver-class-name: com.mysql.cj.jdbc.Driver
      # 始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
      initial-size: 2
      # 最小连接池数量
      min-idle: 5
      # 最大连接池数量
      max-active: 10
      # 程序向连接池中请求连接时,超过maxWait的值后，认为本次请求失败，即连接池
      max-wait: 5000
      # 每个连接最多缓存多少个SQL
      max-pool-prepared-statement-per-connection-size: 20
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validation-query: SELECT now()
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 程序申请连接时,进行连接有效性检查（低效，影响性能）
      test-on-borrow: false
      # 程序返还连接时,进行连接有效性检查（低效，影响性能）
      test-on-return: false
      # 物理连接初始化的时候执行的sql
      connection-init-sqls: SELECT now()
      # 程序没有close连接且空闲时长超过 minEvictableIdleTimeMillis,则会执行validationQuery指定的SQL,以保证该程序连接不会池kill掉,其范围不超过minIdle指定的连接个数。
      keep-alive: true
      # 当druid强制回收连接后，是否将stack trace 记录到日志中
      log-abandoned: true
      # 设置druid 强制回收连接的时限，当程序从池中get到连接开始算起，超过此值后，druid将强制回收该连接，单位秒。应大于业务运行最长时间
      remove-abandoned-timeout: 6000
      # 连接属性。比如设置一些连接池统计方面的配置。
      connection-properties: druid.stat.mergeSql=true; druid.stat.slowSqlMillis=5000

      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
      filters: stat, wall, slf4j
      filter:
        stat: # 监控统计
          enabled: true
          log-slow-sql: true # 慢SQL记录
          slow-sql-millis: 1000 # 慢SQL执行时间
          merge-sql: true # 是否合并sql
          db-type: mysql # 数据库类型
        wall: # 防御SQL注入
          enabled: true
          db-type: mysql
          config:
            delete-allow: false
            drop-table-allow: false
            multi-statement-allow: true

      # statViewServlet配置
      stat-view-servlet:
        enabled: true # 是否启用
        allow: 127.0.0.1 # 设置白名单，不填则允许所有访问
        deny: 192.168.0.1 # 设置黑名单, 如果allow与deny同时存在，deny优先于allow
        reset-enable: false # 禁止手动重置监控数据
        url-pattern: /druid/*
        login-username: admin  # 设置监控页面的登陆密码
        login-password: admin  # 设置监控页面的登陆名


      # WebStatFilter配置
      web-stat-filter:
        enabled: true # 是否启用
        url-pattern: "/*"  # 访问路径
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*" # 排除不必要的url
        session-stat-max-count: 1000 # 监控最大session数，默认是1000
        session-stat-enable: true # 是否启用session的统计功能
        profile-enable: true # 是否启用监控单个Url调用的sql列表
        principalSessionName: session_user_key # 使druid当前session的用户是谁，session_user_key是你保存到session中的sessionName
        principalCookieName: cookie_user_key # 使druid只当当前的user是谁,cookie_user_key是你保存在cookie中的cookieName

mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true